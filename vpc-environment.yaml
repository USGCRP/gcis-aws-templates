AWSTemplateFormatVersion: '2010-09-09'

Description: 'VPC Environment - v0.1.4'

Parameters:

  pRegionAZ1Name:
    Description: 'Availability Zone 1 Name in Region'
    Type: String

  pRegionAZ2Name:
    Description: 'Availability Zone 2 Name in Region'
    Type: String
    Default: 'empty'

  pRegionAZ3Name:
    Description: 'Availability Zone 3 Name in Region'
    Type: String
    Default: 'empty'

  pVPCName:
    Description: 'VPC Name'
    Type: String
    MaxLength: 12
    AllowedPattern: '[-a-zA-Z0-9]*'
    ConstraintDescription: 'VPC name can be up to 12 alphanumeric characters and dashes'

  pCIDR:
    Description: 'CIDR block for VPC'
    Type: String

  pExternalHttpAllowed:
    Description: 'Should HTTP be allowed or only HTTPS externally'
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'

  pManagementCIDR:
    Description: 'CIDR of Management VPC'
    Type: String

  pDMZSubnet1CIDR:
    Description: 'CIDR block for DMZ AZ-1 subnet'
    Type: String
    Default: ''

  pDMZSubnet2CIDR:
    Description: 'CIDR block for DMZ AZ-2 subnet'
    Type: String
    Default: ''

  pDMZSubnet3CIDR:
    Description: 'CIDR block for DMZ AZ-3 subnet'
    Type: String
    Default: ''

  pAppSubnet1CIDR:
    Description: 'CIDR block for Application AZ-1 subnet'
    Type: String
    Default: ''

  pAppSubnet2CIDR:
    Description: 'CIDR block for Application AZ-2 subnet'
    Type: String
    Default: ''

  pAppSubnet3CIDR:
    Description: 'CIDR block for Application AZ-3 subnet'
    Type: String
    Default: ''

  pDbSubnet1CIDR:
    Description: 'CIDR block for DB 1 subnet'
    Type: String
    Default: ''

  pDbSubnet2CIDR:
    Description: 'CIDR block for DB 2 subnet'
    Type: String
    Default: ''

  pDbSubnet3CIDR:
    Description: 'CIDR block for DB 3 subnet'
    Type: String
    Default: ''

  pVPCTenancy:
    Description: 'Instance tenancy behavior for this VPC'
    Type: String
    Default: 'default'
    AllowedValues:
      - 'default'
      - 'dedicated'

  pEnvironment:
    Description: 'Environment (dev, test, stage or prod)'
    Type: String
    Default: 'dev'
    AllowedValues:
      - 'dev'
      - 'test'
      - 'stage'
      - 'prod'

  pFlowLogGroup:
    Description: 'Log Group for capturing VPC Flow Logs'
    Type: String
    Default: ''

  StackTemplates:
    Description: Template service base URL
    Type: String
    Default: 'https://s3.us-east-2.amazonaws.com/cfn-stacks.com/templates'

Conditions:

  cCreateTwoSubnets: !Not [ !Equals [ 'empty', !Ref pRegionAZ2Name ] ]

  cCreateThreeSubnets: !Not [ !Equals [ 'empty', !Ref pRegionAZ3Name ] ]

  cEnableFlowLogs: !Not [ !Equals [ '', !Ref pFlowLogGroup ] ]

  cExternalHttpAllowed: !Equals [ 'true', !Ref pExternalHttpAllowed ]

  cDMZSubnet1CIDREmpty: !Equals [ '', !Ref pDMZSubnet1CIDR ]

  cDMZSubnet2CIDREmpty: !Equals [ '', !Ref pDMZSubnet2CIDR ]

  cDMZSubnet3CIDREmpty: !Equals [ '', !Ref pDMZSubnet3CIDR ]

  cAppSubnet1CIDREmpty: !Equals [ '', !Ref pAppSubnet1CIDR ]

  cAppSubnet2CIDREmpty: !Equals [ '', !Ref pAppSubnet2CIDR ]

  cAppSubnet3CIDREmpty: !Equals [ '', !Ref pAppSubnet3CIDR ]

  cDbSubnet1CIDREmpty: !Equals [ '', !Ref pDbSubnet1CIDR ]

  cDbSubnet2CIDREmpty: !Equals [ '', !Ref pDbSubnet2CIDR ]

  cDbSubnet3CIDREmpty: !Equals [ '', !Ref pDbSubnet3CIDR ]

Resources:

  rVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref pCIDR
      InstanceTenancy: !Ref pVPCTenancy
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${pVPCName}-${pEnvironment}'
        - Key: Environment
          Value: !Ref pEnvironment

  rSecurityGroupVpcNat:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow NAT'
      VpcId: !Ref rVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref pCIDR
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref pCIDR
      Tags:
        - Key: Name
          Value: sg-web-access-ports
        - Key: Environment
          Value: !Ref pEnvironment

  rSecurityGroupSSH:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable SSH access via port 22'
      VpcId: !Ref rVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref pCIDR
      Tags:
        - Key: Name
          Value: sg-enable-ssh-access
        - Key: Environment
          Value: !Ref pEnvironment

  rDMZSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !If [ cDMZSubnet1CIDREmpty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pCIDR ] ], '48.0/24' ] ], !Ref pDMZSubnet1CIDR ]
      AvailabilityZone: !Ref pRegionAZ1Name
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: 'DMZ Subnet 1'
        - Key: Environment
          Value: !Ref pEnvironment

  rDMZSubnet2:
    Type: 'AWS::EC2::Subnet'
    Condition: cCreateTwoSubnets
    Properties:
      CidrBlock: !If [ cDMZSubnet2CIDREmpty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pCIDR ] ], '49.0/24' ] ], !Ref pDMZSubnet2CIDR ]
      AvailabilityZone: !Ref pRegionAZ2Name
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: 'DMZ Subnet 2'
        - Key: Environment
          Value: !Ref pEnvironment

  rDMZSubnet3:
    Type: 'AWS::EC2::Subnet'
    Condition: cCreateThreeSubnets
    Properties:
      CidrBlock: !If [ cDMZSubnet3CIDREmpty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pCIDR ] ], '50.0/24' ] ], !Ref pDMZSubnet3CIDR ]
      AvailabilityZone: !Ref pRegionAZ3Name
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: 'DMZ Subnet 3'
        - Key: Environment
          Value: !Ref pEnvironment

  rAppSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !If [ cAppSubnet1CIDREmpty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pCIDR ] ], '0.0/20' ] ], !Ref pAppSubnet1CIDR ]
      AvailabilityZone: !Ref pRegionAZ1Name
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: 'App Subnet 1'
        - Key: Environment
          Value: !Ref pEnvironment

  rAppSubnet2:
    Type: 'AWS::EC2::Subnet'
    Condition: cCreateTwoSubnets
    Properties:
      CidrBlock: !If [ cAppSubnet2CIDREmpty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pCIDR ] ], '16.0/20' ] ], !Ref pAppSubnet2CIDR ]
      AvailabilityZone: !Ref pRegionAZ2Name
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: 'App Subnet 2'
        - Key: Environment
          Value: !Ref pEnvironment

  rAppSubnet3:
    Type: 'AWS::EC2::Subnet'
    Condition: cCreateThreeSubnets
    Properties:
      CidrBlock: !If [ cAppSubnet3CIDREmpty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pCIDR ] ], '32.0/20' ] ], !Ref pAppSubnet3CIDR ]
      AvailabilityZone: !Ref pRegionAZ3Name
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: 'App Subnet 3'
        - Key: Environment
          Value: !Ref pEnvironment

  rDbSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !If [ cDbSubnet1CIDREmpty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pCIDR ] ], '51.0/24' ] ], !Ref pDbSubnet1CIDR ]
      AvailabilityZone: !Ref pRegionAZ1Name
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: 'DB Subnet 1'
        - Key: Environment
          Value: !Ref pEnvironment

  rDbSubnet2:
    Type: 'AWS::EC2::Subnet'
    Condition: cCreateTwoSubnets
    Properties:
      CidrBlock: !If [ cDbSubnet2CIDREmpty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pCIDR ] ], '52.0/24' ] ], !Ref pDbSubnet2CIDR ]
      AvailabilityZone: !Ref pRegionAZ2Name
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: 'DB Subnet 2'
        - Key: Environment
          Value: !Ref pEnvironment

  rDbSubnet3:
    Type: 'AWS::EC2::Subnet'
    Condition: cCreateThreeSubnets
    Properties:
      CidrBlock: !If [ cDbSubnet3CIDREmpty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pCIDR ] ], '53.0/24' ] ], !Ref pDbSubnet3CIDR ]
      AvailabilityZone: !Ref pRegionAZ3Name
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: 'DB Subnet 3'
        - Key: Environment
          Value: !Ref pEnvironment

  rIGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: igw
        - Key: Environment
          Value: !Ref pEnvironment

  rNACLPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: 'Public subnets NACL'

  rNACLPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: 'Private subnets NACL'

  rRouteTableDMZ:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: 'DMZ Route'

  rEIPNat1:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  rNATGatewaySubnet1:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: rIGW
    Properties:
      AllocationId: !GetAtt rEIPNat1.AllocationId
      SubnetId: !Ref rDMZSubnet1

  rEIPNat2:
    Type: 'AWS::EC2::EIP'
    Condition: cCreateTwoSubnets
    Properties:
      Domain: vpc

  rNATGatewaySubnet2:
    Type: 'AWS::EC2::NatGateway'
    Condition: cCreateTwoSubnets
    DependsOn: rIGW
    Properties:
      AllocationId: !GetAtt rEIPNat2.AllocationId
      SubnetId: !Ref rDMZSubnet2

  rEIPNat3:
    Type: 'AWS::EC2::EIP'
    Condition: cCreateThreeSubnets
    Properties:
      Domain: vpc

  rNATGatewaySubnet3:
    Type: 'AWS::EC2::NatGateway'
    Condition: cCreateThreeSubnets
    DependsOn: rIGW
    Properties:
      AllocationId: !GetAtt rEIPNat3.AllocationId
      SubnetId: !Ref rDMZSubnet3

  rRouteIGW:
    Type: 'AWS::EC2::Route'
    DependsOn: rGWAttachmentIGW
    Properties:
      RouteTableId: !Ref rRouteTableDMZ
      GatewayId: !Ref rIGW
      DestinationCidrBlock: '0.0.0.0/0'

  rRoutePrivateNatGateway1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref rRouteTablePrivate1
      NatGatewayId: !Ref rNATGatewaySubnet1
      DestinationCidrBlock: '0.0.0.0/0'

  rRoutePrivateNatGateway2:
    Type: 'AWS::EC2::Route'
    Condition: cCreateTwoSubnets
    Properties:
      RouteTableId: !Ref rRouteTablePrivate2
      NatGatewayId: !Ref rNATGatewaySubnet2
      DestinationCidrBlock: '0.0.0.0/0'

  rRoutePrivateNatGateway3:
    Type: 'AWS::EC2::Route'
    Condition: cCreateThreeSubnets
    Properties:
      RouteTableId: !Ref rRouteTablePrivate3
      NatGatewayId: !Ref rNATGatewaySubnet3
      DestinationCidrBlock: '0.0.0.0/0'

  rRouteAssocDMZ1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref rRouteTableDMZ
      SubnetId: !Ref rDMZSubnet1

  rRouteAssocDMZ2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: cCreateTwoSubnets
    Properties:
      RouteTableId: !Ref rRouteTableDMZ
      SubnetId: !Ref rDMZSubnet2

  rRouteAssocDMZ3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: cCreateThreeSubnets
    Properties:
      RouteTableId: !Ref rRouteTableDMZ
      SubnetId: !Ref rDMZSubnet3

  rAppSubnetAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref rRouteTablePrivate1
      SubnetId: !Ref rAppSubnet1

  rAppSubnetAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: cCreateTwoSubnets
    Properties:
      RouteTableId: !Ref rRouteTablePrivate2
      SubnetId: !Ref rAppSubnet2

  rAppSubnetAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: cCreateThreeSubnets
    Properties:
      RouteTableId: !Ref rRouteTablePrivate3
      SubnetId: !Ref rAppSubnet3

  rRouteAssocDb1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref rRouteTablePrivate1
      SubnetId: !Ref rDbSubnet1

  rRouteAssocDb2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: cCreateTwoSubnets
    Properties:
      RouteTableId: !Ref rRouteTablePrivate2
      SubnetId: !Ref rDbSubnet2

  rRouteAssocDb3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: cCreateThreeSubnets
    Properties:
      RouteTableId: !Ref rRouteTablePrivate3
      SubnetId: !Ref rDbSubnet3

  rRouteTablePrivate1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: 'Private Route 1'

  rRouteTablePrivate2:
    Type: 'AWS::EC2::RouteTable'
    Condition: cCreateTwoSubnets
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: 'Private Route 2'

  rRouteTablePrivate3:
    Type: 'AWS::EC2::RouteTable'
    Condition: cCreateThreeSubnets
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: 'Private Route 3'

  rNACLRuleAllowHttpFromAnywhere:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: !If [ cExternalHttpAllowed, '0.0.0.0/0' , !Ref pCIDR ]
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction: allow
      RuleNumber: 110
      NetworkAclId: !Ref rNACLPrivate

  rNACLRuleAllowHttpsFromAnywhere:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: '0.0.0.0/0'
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: allow
      RuleNumber: 115
      NetworkAclId: !Ref rNACLPrivate

  rNACLRuleAllowAllTCPInternal:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: !Ref pCIDR
      Protocol: 6
      PortRange:
        From: 1
        To: 65535
      RuleAction: allow
      RuleNumber: 120
      NetworkAclId: !Ref rNACLPrivate

  rNACLRuleAllowMgmtAccessSSHtoPrivate:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: !Ref pManagementCIDR
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: allow
      RuleNumber: 125
      NetworkAclId: !Ref rNACLPrivate

  rNACLRuleAllowReturnTCPPriv:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: '0.0.0.0/0'
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: allow
      RuleNumber: 140
      NetworkAclId: !Ref rNACLPrivate

  rNACLRuleAllowALLfromPrivEgress:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: true
      Protocol: 6
      PortRange:
        From: 1
        To: 65535
      RuleAction: allow
      RuleNumber: 120
      NetworkAclId: !Ref rNACLPrivate

  rNACLRuleAllowAllTCPInternalEgress:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: true
      Protocol: 6
      PortRange:
        From: 1
        To: 65535
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref rNACLPrivate

  rNACLRuleAllowALLEgressPublic:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: true
      Protocol: 6
      PortRange:
        From: 1
        To: 65535
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref rNACLPublic

  rNACLRuleAllowAllReturnTCP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: '0.0.0.0/0'
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: allow
      RuleNumber: 140
      NetworkAclId: !Ref rNACLPublic

  rNACLRuleAllowHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: !If [ cExternalHttpAllowed, '0.0.0.0/0' , !Ref pCIDR ]
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction: allow
      RuleNumber: 200
      NetworkAclId: !Ref rNACLPublic

  rNACLRuleAllowBastionSSHAccessPublic:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: '0.0.0.0/0'
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: allow
      RuleNumber: 210
      NetworkAclId: !Ref rNACLPublic

  rNACLRuleAllowEgressReturnTCP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: true
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: allow
      RuleNumber: 140
      NetworkAclId: !Ref rNACLPublic

  rNACLRuleAllowHTTPSPublic:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: '0.0.0.0/0'
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref rNACLPublic

  rNACLAssocDMZPubSubnet1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref rNACLPublic
      SubnetId: !Ref rDMZSubnet1

  rNACLAssocDMZPubSubnet2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Condition: cCreateTwoSubnets
    Properties:
      NetworkAclId: !Ref rNACLPublic
      SubnetId: !Ref rDMZSubnet2

  rNACLAssocDMZPubSubnet3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Condition: cCreateThreeSubnets
    Properties:
      NetworkAclId: !Ref rNACLPublic
      SubnetId: !Ref rDMZSubnet3

  rNACLAssocAppPrivSubnet1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref rNACLPrivate
      SubnetId: !Ref rAppSubnet1

  rNACLAssocAppPrivSubnet2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Condition: cCreateTwoSubnets
    Properties:
      NetworkAclId: !Ref rNACLPrivate
      SubnetId: !Ref rAppSubnet2

  rNACLAssocAppPrivSubnet3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Condition: cCreateThreeSubnets
    Properties:
      NetworkAclId: !Ref rNACLPrivate
      SubnetId: !Ref rAppSubnet3

  rNACLAssocDbPrivSubnet1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref rNACLPrivate
      SubnetId: !Ref rDbSubnet1

  rNACLAssocDbPrivSubnet2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Condition: cCreateTwoSubnets
    Properties:
      NetworkAclId: !Ref rNACLPrivate
      SubnetId: !Ref rDbSubnet2

  rNACLAssocDbPrivSubnet3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Condition: cCreateThreeSubnets
    Properties:
      NetworkAclId: !Ref rNACLPrivate
      SubnetId: !Ref rDbSubnet3

  rGWAttachmentIGW:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn: rIGW
    Properties:
      VpcId: !Ref rVPC
      InternetGatewayId: !Ref rIGW

  rVpcFlowLogsServiceRole:
    Type: 'AWS::IAM::Role'
    Condition: cEnableFlowLogs
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowFlowLogs
            Effect: Allow
            Principal:
                Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: cloudwatchlogsrole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Effect: Allow
                Resource: '*'

  rVpcFlowLog:
    Type: 'AWS::EC2::FlowLog'
    Condition: cEnableFlowLogs
    Properties:
      DeliverLogsPermissionArn: !GetAtt rVpcFlowLogsServiceRole.Arn
      LogGroupName: !Ref pFlowLogGroup
      ResourceId: !Ref rVPC
      ResourceType: VPC
      TrafficType: ALL

  rVpcFlowLogStream:
    Type: 'AWS::Logs::LogStream'
    Condition: cEnableFlowLogs
    Properties:
      LogGroupName: !Ref pFlowLogGroup

  rEndpointS3Route:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      RouteTableIds:
        - !Ref rRouteTableDMZ
        - !Ref rRouteTablePrivate1
        - !If [ cCreateTwoSubnets, !Ref rRouteTablePrivate2, !Ref 'AWS::NoValue' ]
        - !If [ cCreateThreeSubnets, !Ref rRouteTablePrivate3, !Ref 'AWS::NoValue' ]
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref rVPC

Outputs:

  ArtifactId:
    Description: Artifact ID
    Value: base-vpc

  ArtifactVersion:
    Description: Artifact version
    Value: v0.1.4

  rVPC:
    Value: !Ref rVPC
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-vpc'

  rVPCCIDR:
    Value: !Ref pCIDR
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-vpc-cidr'

  rRegionAZ1Name:
    Value: !Ref pRegionAZ1Name
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-az1'

  rRegionAZ2Name:
    Condition: cCreateTwoSubnets
    Value: !Ref pRegionAZ2Name
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-az2'

  rRegionAZ3Name:
    Condition: cCreateThreeSubnets
    Value: !Ref pRegionAZ3Name
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-az3'

  rDMZSubnet1:
    Value: !Ref rDMZSubnet1
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-dmz-subnet-1'

  rDMZSubnet1CIDR:
    Value: !If [ cDMZSubnet1CIDREmpty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pCIDR ] ], '48.0/24' ] ], !Ref pDMZSubnet1CIDR ]
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-dmz-subnet-1-cidr'

  rDMZSubnet2:
    Condition: cCreateTwoSubnets
    Value: !Ref rDMZSubnet2
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-dmz-subnet-2'

  rDMZSubnet2CIDR:
    Condition: cCreateTwoSubnets
    Value: !If [ cDMZSubnet2CIDREmpty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pCIDR ] ], '49.0/24' ] ], !Ref pDMZSubnet2CIDR ]
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-dmz-subnet-2-cidr'

  rDMZSubnet3:
    Condition: cCreateThreeSubnets
    Value: !Ref rDMZSubnet3
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-dmz-subnet-3'

  rDMZSubnet3CIDR:
    Condition: cCreateThreeSubnets
    Value: !If [ cDMZSubnet3CIDREmpty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pCIDR ] ], '50.0/24' ] ], !Ref pDMZSubnet3CIDR ]
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-dmz-subnet-3-cidr'

  rRouteTablePrivate1:
    Value: !Ref rRouteTablePrivate1
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-route-table-private-1'

  rRouteTablePrivate2:
    Condition: cCreateTwoSubnets
    Value: !Ref rRouteTablePrivate2
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-route-table-private-2'

  rRouteTablePrivate3:
    Condition: cCreateThreeSubnets
    Value: !Ref rRouteTablePrivate3
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-route-table-private-3'

  rRouteTableDMZ:
    Value: !Ref rRouteTableDMZ
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-route-table-dmz'

  rAppSubnet1:
    Value: !Ref rAppSubnet1
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-app-subnet-1'

  rAppSubnet1CIDR:
    Value: !If [ cAppSubnet1CIDREmpty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pCIDR ] ], '0.0/20' ] ], !Ref pAppSubnet1CIDR ]
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-app-subnet-1-cidr'

  rAppSubnet2:
    Condition: cCreateTwoSubnets
    Value: !Ref rAppSubnet2
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-app-subnet-2'

  rAppSubnet2CIDR:
    Condition: cCreateTwoSubnets
    Value: !If [ cAppSubnet2CIDREmpty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pCIDR ] ], '16.0/20' ] ], !Ref pAppSubnet2CIDR ]
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-app-subnet-2-cidr'

  rAppSubnet3:
    Condition: cCreateThreeSubnets
    Value: !Ref rAppSubnet3
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-app-subnet-3'

  rAppSubnet3CIDR:
    Condition: cCreateThreeSubnets
    Value: !If [ cAppSubnet3CIDREmpty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pCIDR ] ], '32.0/20' ] ], !Ref pAppSubnet3CIDR ]
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-app-subnet-3-cidr'

  rDbSubnet1:
    Value: !Ref rDbSubnet1
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-db-subnet-1'

  rDbSubnet1CIDR:
    Value: !If [ cDbSubnet1CIDREmpty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pCIDR ] ], '51.0/24' ] ], !Ref pDbSubnet1CIDR ]
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-db-subnet-1-cidr'

  rDbSubnet2:
    Condition: cCreateTwoSubnets
    Value: !Ref rDbSubnet2
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-db-subnet-2'

  rDbSubnet2CIDR:
    Condition: cCreateTwoSubnets
    Value: !If [ cDbSubnet2CIDREmpty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pCIDR ] ], '52.0/24' ] ], !Ref pDbSubnet2CIDR ]
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-db-subnet-2-cidr'

  rDbSubnet3:
    Condition: cCreateThreeSubnets
    Value: !Ref rDbSubnet3
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-db-subnet-3'

  rDbSubnet3CIDR:
    Condition: cCreateThreeSubnets
    Value: !If [ cDbSubnet3CIDREmpty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pCIDR ] ], '53.0/24' ] ], !Ref pDbSubnet3CIDR ]
    Export:
      Name: !Sub '${pVPCName}-${pEnvironment}-db-subnet-3-cidr'

  rSecurityGroupVpcNat:
    Value: !Ref rSecurityGroupVpcNat