AWSTemplateFormatVersion: '2010-09-09'

Description: 'VPC Management - v0.1.4'

Parameters:

  pAppId:
    Description: 'Identifier used to label components'
    Type: String
    Default: ''

  # Save an extra NAT Gateway if we're just using this VPC for access into others
  pUsePrivateSubnets:
    Description: 'Are we deploying resources into the private subnets?'
    Type: String
    Default: false
    AllowedValues:
      - true
      - false

  pRegionAZ1Name:
    Description: 'Availability Zone 1 Name in Region'
    Type: String

  pRegionAZ2Name:
    Description: 'Availability Zone 2 Name in Region'
    Type: String
    Default: ''

  pRegionAZ3Name:
    Description: 'Availability Zone 2 Name in Region'
    Type: String
    Default: ''

  pProductionVPC:
    Description: 'Production VPC to peer with (optional)'
    Type: String
    Default: ''

  pStagingVPC:
    Description: 'Staging VPC to peer with (optional)'
    Type: String
    Default: ''

  pTestVPC:
    Description: 'Test VPC to peer with (optional)'
    Type: String
    Default: ''

  pDevVPC:
    Description: 'Dev VPC to peer with (optional)'
    Type: String
    Default: ''

  pManagementVPCName:
    Description: 'Management VPC Name'
    Type: String
    Default: 'Management VPC'

  pManagementCIDR:
    Description: 'CIDR block for Management VPC'
    Type: String

  pManagementDMZSubnet1CIDR:
    Description: 'CIDR block for Management DMZ AZ-1 subnet'
    Type: String
    Default: ''

  pManagementDMZSubnet2CIDR:
    Description: 'CIDR block for Management DMZ AZ-2 subnet'
    Type: String
    Default: ''

  pManagementDMZSubnet3CIDR:
    Description: 'CIDR block for Management DMZ AZ-3 subnet'
    Type: String
    Default: ''

  pManagementPrivateSubnet1CIDR:
    Description: 'CIDR block for Management Private AZ-1 subnet'
    Type: String
    Default: ''

  pManagementPrivateSubnet2CIDR:
    Description: 'CIDR block for Management Private AZ-2 subnet'
    Type: String
    Default: ''

  pManagementPrivateSubnet3CIDR:
    Description: 'CIDR block for Management Private AZ-3 subnet'
    Type: String
    Default: ''

  pVPCTenancy:
    Description: 'Instance tenancy behavior for this VPC'
    Type: String
    Default: default
    AllowedValues:
      - default
      - dedicated

  pEnvironment:
    Description: 'Environment (dev, test, stage or prod)'
    Type: String
    Default: 'dev'
    AllowedValues:
      - 'dev'
      - 'test'
      - 'stage'
      - 'prod'

  pFlowLogGroup:
      Description: 'Log Group for capturing VPC Flow Logs'
      Type: String
      Default: ''

Conditions:

  cEnableFlowLogs: !Not [ !Equals [ !Ref pFlowLogGroup, '' ] ]

  cCreateTwoSubnets: !Not [ !Equals [ '', !Ref pRegionAZ2Name ] ]

  cCreateThreeSubnets: !Not [ !Equals [ '', !Ref pRegionAZ3Name ] ]

  cUsePrivateSubnets: !Equals [ 'true', !Ref pUsePrivateSubnets ]


  cCreatePeeringProduction: !Not [ !Equals [ '', !Ref pProductionVPC] ]

  cCreatePeeringProductionTwoSubnets: !And [ !Not [ !Equals [ '', !Ref pProductionVPC] ], !Not [ !Equals [ '', !Ref pRegionAZ2Name ] ] ]

  cCreatePeeringProductionThreeSubnets: !And [ !Not [ !Equals [ '', !Ref pProductionVPC] ], !Not [ !Equals [ '', !Ref pRegionAZ3Name ] ] ]


  cCreatePeeringStaging: !Not [ !Equals [ '', !Ref pStagingVPC] ]

  cCreatePeeringStagingTwoSubnets: !And [ !Not [ !Equals [ '', !Ref pStagingVPC] ], !Not [ !Equals [ '', !Ref pRegionAZ2Name ] ] ]

  cCreatePeeringStagingThreeSubnets: !And [ !Not [ !Equals [ '', !Ref pStagingVPC] ], !Not [ !Equals [ '', !Ref pRegionAZ3Name ] ] ]


  cCreatePeeringTest: !Not [ !Equals [ '', !Ref pTestVPC] ]

  cCreatePeeringTestTwoSubnets: !And [ !Not [ !Equals [ '', !Ref pTestVPC] ], !Not [ !Equals [ '', !Ref pRegionAZ2Name ] ] ]

  cCreatePeeringTestThreeSubnets: !And [ !Not [ !Equals [ '', !Ref pTestVPC] ], !Not [ !Equals [ '', !Ref pRegionAZ3Name ] ] ]


  cCreatePeeringDev: !Not [ !Equals [ '', !Ref pDevVPC] ]

  cCreatePeeringDevTwoSubnets: !And [ !Not [ !Equals [ '', !Ref pDevVPC] ], !Not [ !Equals [ '', !Ref pRegionAZ2Name ] ] ]

  cCreatePeeringDevThreeSubnets: !And [ !Not [ !Equals [ '', !Ref pDevVPC] ], !Not [ !Equals [ '', !Ref pRegionAZ3Name ] ] ]


  cManagementDMZSubnet1Empty: !Equals [ '', !Ref pManagementDMZSubnet1CIDR ]

  cManagementDMZSubnet2Empty: !Equals [ '', !Ref pManagementDMZSubnet2CIDR ]

  cManagementDMZSubnet3Empty: !Equals [ '', !Ref pManagementDMZSubnet3CIDR ]


  cManagementPrivateSubnet1Empty: !Equals [ '', !Ref pManagementPrivateSubnet1CIDR ]

  cManagementPrivateSubnet2Empty: !Equals [ '', !Ref pManagementPrivateSubnet2CIDR ]

  cManagementPrivateSubnet3Empty: !Equals [ '', !Ref pManagementPrivateSubnet3CIDR ]

Resources:

  rVPCManagement:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref pManagementCIDR
      InstanceTenancy: !Ref pVPCTenancy
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref pManagementVPCName

  rSecurityGroupVpcNat:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow NAT from Management VPC
      VpcId: !Ref rVPCManagement
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref pManagementCIDR
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref pManagementCIDR
      Tags:
        - Key: Name
          Value: sg-web-access-ports
        - Key: Environment
          Value: !Ref pEnvironment

  rManagementDMZSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !If [ cManagementDMZSubnet1Empty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pManagementCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pManagementCIDR ] ], '0.0/24' ] ], !Ref pManagementDMZSubnet1CIDR ]
      AvailabilityZone: !Ref pRegionAZ1Name
      VpcId: !Ref rVPCManagement
      Tags:
        - Key: Name
          Value: 'Management DMZ Subnet 1'

  rManagementDMZSubnet2:
    Type: 'AWS::EC2::Subnet'
    Condition: cCreateTwoSubnets
    Properties:
      CidrBlock: !If [ cManagementDMZSubnet2Empty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pManagementCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pManagementCIDR ] ], '1.0/24' ] ], !Ref pManagementDMZSubnet2CIDR ]
      AvailabilityZone: !Ref pRegionAZ2Name
      VpcId: !Ref rVPCManagement
      Tags:
        - Key: Name
          Value: 'Management DMZ Subnet 2'

  rManagementDMZSubnet3:
    Type: 'AWS::EC2::Subnet'
    Condition: cCreateThreeSubnets
    Properties:
      CidrBlock: !If [ cManagementDMZSubnet3Empty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pManagementCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pManagementCIDR ] ], '2.0/24' ] ], !Ref pManagementDMZSubnet3CIDR ]
      AvailabilityZone: !Ref pRegionAZ3Name
      VpcId: !Ref rVPCManagement
      Tags:
        - Key: Name
          Value: 'Management DMZ Subnet 3'

  rManagementPrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !If [ cManagementPrivateSubnet1Empty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pManagementCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pManagementCIDR ] ], '3.0/24' ] ], !Ref pManagementPrivateSubnet1CIDR ]
      AvailabilityZone: !Ref pRegionAZ1Name
      VpcId: !Ref rVPCManagement
      Tags:
        - Key: Name
          Value: 'Management Private Subnet 1'

  rManagementPrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Condition: cCreateTwoSubnets
    Properties:
      CidrBlock: !If [ cManagementPrivateSubnet2Empty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pManagementCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pManagementCIDR ] ], '4.0/24' ] ], !Ref pManagementPrivateSubnet2CIDR ]
      AvailabilityZone: !Ref pRegionAZ2Name
      VpcId: !Ref rVPCManagement
      Tags:
        - Key: Name
          Value: 'Management Private Subnet 2'

  rManagementPrivateSubnet3:
    Type: 'AWS::EC2::Subnet'
    Condition: cCreateThreeSubnets
    Properties:
      CidrBlock: !If [ cManagementPrivateSubnet3Empty, !Join [ '.', [ 'Fn::Select': [ 0, 'Fn::Split': [ '.', !Ref pManagementCIDR ] ], 'Fn::Select': [ 1, 'Fn::Split': [ '.', !Ref pManagementCIDR ] ], '5.0/24' ] ], !Ref pManagementPrivateSubnet3CIDR ]
      AvailabilityZone: !Ref pRegionAZ3Name
      VpcId: !Ref rVPCManagement
      Tags:
        - Key: Name
          Value: 'Management Private Subnet 3'

  rIGWManagement:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: igw-management

  rRouteTableMgmtPrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref rVPCManagement
      Tags:
        - Key: Name
          Value: 'Management Private Route'

  rRouteTableMgmtDMZ:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref rVPCManagement
      Tags:
        - Key: Name
          Value: 'Management DMZ Route'

  rRouteMgmtIGW:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - rGWAttachmentMgmtIGW
    Properties:
      RouteTableId: !Ref rRouteTableMgmtDMZ
      GatewayId: !Ref rIGWManagement
      DestinationCidrBlock: '0.0.0.0/0'

  rRouteAssocMgmtDMZ1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref rRouteTableMgmtDMZ
      SubnetId: !Ref rManagementDMZSubnet1

  rRouteAssocMgmtDMZ2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: cCreateTwoSubnets
    Properties:
      RouteTableId: !Ref rRouteTableMgmtDMZ
      SubnetId: !Ref rManagementDMZSubnet2

  rRouteAssocMgmtDMZ3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: cCreateThreeSubnets
    Properties:
      RouteTableId: !Ref rRouteTableMgmtDMZ
      SubnetId: !Ref rManagementDMZSubnet3

  rRouteAssocMgmtPriv1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref rRouteTableMgmtPrivate
      SubnetId: !Ref rManagementPrivateSubnet1

  rRouteAssocMgmtPriv2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: cCreateTwoSubnets
    Properties:
      RouteTableId: !Ref rRouteTableMgmtPrivate
      SubnetId: !Ref rManagementPrivateSubnet2

  rRouteAssocMgmtPriv3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: cCreateThreeSubnets
    Properties:
      RouteTableId: !Ref rRouteTableMgmtPrivate
      SubnetId: !Ref rManagementPrivateSubnet3

  rEIPManagementNAT:
    Type: 'AWS::EC2::EIP'
    Condition: cUsePrivateSubnets
    Properties:
      Domain: vpc

  rSecurityGroupSSHFromMgmt:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable SSH access via port 22'
      VpcId: !Ref rVPCManagement
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref pManagementCIDR
      Tags:
        - Key: Name
          Value: sg-ssh-access-from-management
        - Key: Environment
          Value: !Ref pEnvironment

  rManagementNATInstanceInterface:
    Type: 'AWS::EC2::NetworkInterface'
    Condition: cUsePrivateSubnets
    Properties:
      SubnetId: !Ref rManagementDMZSubnet1
      GroupSet:
        - !Ref rSecurityGroupSSHFromMgmt
        - !Ref rSecurityGroupVpcNat
      Description: 'Interface for Nat device'
      Tags:
        - Key: Network
          Value: rManagementNATInstanceInterface

  AssociateEIPManagementNAT:
    Type: 'AWS::EC2::EIPAssociation'
    Condition: cUsePrivateSubnets
    Properties:
      AllocationId: !GetAtt rEIPManagementNAT.AllocationId
      NetworkInterfaceId: !Ref rManagementNATInstanceInterface

  rEIPProdNAT:
    Type: 'AWS::EC2::EIP'
    Condition: cUsePrivateSubnets
    Properties:
      Domain: vpc

  rNATGateway:
    Type: 'AWS::EC2::NatGateway'
    Condition: cUsePrivateSubnets
    DependsOn: rIGWManagement
    Properties:
      AllocationId: !GetAtt rEIPProdNAT.AllocationId
      SubnetId: !Ref rManagementDMZSubnet1

  rGWAttachmentMgmtIGW:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref rVPCManagement
      InternetGatewayId: !Ref rIGWManagement

  rRouteMgmtNGW:
    Type: 'AWS::EC2::Route'
    Condition: cUsePrivateSubnets
    Properties:
      RouteTableId: !Ref rRouteTableMgmtPrivate
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref rNATGateway

  rPeeringConnectionProduction:
    Type: 'AWS::EC2::VPCPeeringConnection'
    Condition: cCreatePeeringProduction
    Properties:
      PeerVpcId: !Ref pProductionVPC
      VpcId: !Ref rVPCManagement
      Tags:
        - Key: Name
          Value: vpc-peer-production-management
        - Key: Environment
          Value: !Ref pEnvironment

  rRouteProdMgmtDMZ:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringProduction
    Properties:
      RouteTableId: !Ref rRouteTableMgmtDMZ
      VpcPeeringConnectionId: !Ref rPeeringConnectionProduction
      DestinationCidrBlock:
        'Fn::ImportValue': !Sub '${pAppId}-prod-vpc-cidr'

  rRouteProdMgmtPrivate:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringProduction
    Properties:
      RouteTableId: !Ref rRouteTableMgmtPrivate
      VpcPeeringConnectionId: !Ref rPeeringConnectionProduction
      DestinationCidrBlock:
        'Fn::ImportValue': !Sub '${pAppId}-prod-vpc-cidr'

  rRouteMgmtProdDMZ:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringProduction
    Properties:
      RouteTableId:
        'Fn::ImportValue': !Sub '${pAppId}-prod-route-table-dmz'
      VpcPeeringConnectionId: !Ref rPeeringConnectionProduction
      DestinationCidrBlock: !Ref pManagementCIDR

  rRouteMgmtProdPrivate1:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringProduction
    Properties:
      RouteTableId:
        'Fn::ImportValue': !Sub '${pAppId}-prod-route-table-private-1'
      VpcPeeringConnectionId: !Ref rPeeringConnectionProduction
      DestinationCidrBlock: !Ref pManagementCIDR

  rRouteMgmtProdPrivate2:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringProductionTwoSubnets
    Properties:
      RouteTableId:
        'Fn::ImportValue': !Sub '${pAppId}-prod-route-table-private-2'
      VpcPeeringConnectionId: !Ref rPeeringConnectionProduction
      DestinationCidrBlock: !Ref pManagementCIDR

  rRouteMgmtProdPrivate3:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringProductionThreeSubnets
    Properties:
      RouteTableId:
        'Fn::ImportValue': !Sub '${pAppId}-prod-route-table-private-3'
      VpcPeeringConnectionId: !Ref rPeeringConnectionProduction
      DestinationCidrBlock: !Ref pManagementCIDR

  rPeeringConnectionStaging:
    Type: 'AWS::EC2::VPCPeeringConnection'
    Condition: cCreatePeeringStaging
    Properties:
      PeerVpcId: !Ref pStagingVPC
      VpcId: !Ref rVPCManagement
      Tags:
        - Key: Name
          Value: vpc-peer-staging-management
        - Key: Environment
          Value: !Ref pEnvironment

  rRouteStagingMgmtDMZ:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringStaging
    Properties:
      RouteTableId: !Ref rRouteTableMgmtDMZ
      VpcPeeringConnectionId: !Ref rPeeringConnectionStaging
      DestinationCidrBlock:
        'Fn::ImportValue': !Sub '${pAppId}-stage-vpc-cidr'

  rRouteStagingMgmtPrivate:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringStaging
    Properties:
      RouteTableId: !Ref rRouteTableMgmtPrivate
      VpcPeeringConnectionId: !Ref rPeeringConnectionStaging
      DestinationCidrBlock:
        'Fn::ImportValue': !Sub '${pAppId}-stage-vpc-cidr'

  rRouteMgmtStagingDMZ:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringStaging
    Properties:
      RouteTableId:
        'Fn::ImportValue': !Sub '${pAppId}-stage-route-table-dmz'
      VpcPeeringConnectionId: !Ref rPeeringConnectionStaging
      DestinationCidrBlock: !Ref pManagementCIDR

  rRouteMgmtStagingPrivate1:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringStaging
    Properties:
      RouteTableId:
        'Fn::ImportValue': !Sub '${pAppId}-stage-route-table-private-1'
      VpcPeeringConnectionId: !Ref rPeeringConnectionStaging
      DestinationCidrBlock: !Ref pManagementCIDR

  rRouteMgmtStagingPrivate2:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringStagingTwoSubnets
    Properties:
      RouteTableId:
        'Fn::ImportValue': !Sub '${pAppId}-stage-route-table-private-2'
      VpcPeeringConnectionId: !Ref rPeeringConnectionStaging
      DestinationCidrBlock: !Ref pManagementCIDR

  rRouteMgmtStagingPrivate3:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringStagingThreeSubnets
    Properties:
      RouteTableId:
        'Fn::ImportValue': !Sub '${pAppId}-stage-route-table-private-3'
      VpcPeeringConnectionId: !Ref rPeeringConnectionStaging
      DestinationCidrBlock: !Ref pManagementCIDR

  rPeeringConnectionTest:
    Type: 'AWS::EC2::VPCPeeringConnection'
    Condition: cCreatePeeringTest
    Properties:
      PeerVpcId: !Ref pTestVPC
      VpcId: !Ref rVPCManagement
      Tags:
        - Key: Name
          Value: vpc-peer-test-management
        - Key: Environment
          Value: !Ref pEnvironment

  rRouteTestMgmtDMZ:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringTest
    Properties:
      RouteTableId: !Ref rRouteTableMgmtDMZ
      VpcPeeringConnectionId: !Ref rPeeringConnectionTest
      DestinationCidrBlock:
        'Fn::ImportValue': !Sub '${pAppId}-test-vpc-cidr'

  rRouteTestMgmtPrivate:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringTest
    Properties:
      RouteTableId: !Ref rRouteTableMgmtPrivate
      VpcPeeringConnectionId: !Ref rPeeringConnectionTest
      DestinationCidrBlock:
        'Fn::ImportValue': !Sub '${pAppId}-test-vpc-cidr'

  rRouteMgmtTestDMZ:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringTest
    Properties:
      RouteTableId:
        'Fn::ImportValue': !Sub '${pAppId}-test-route-table-dmz'
      VpcPeeringConnectionId: !Ref rPeeringConnectionTest
      DestinationCidrBlock: !Ref pManagementCIDR

  rRouteMgmtTestPrivate1:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringTest
    Properties:
      RouteTableId:
        'Fn::ImportValue': !Sub '${pAppId}-test-route-table-private-1'
      VpcPeeringConnectionId: !Ref rPeeringConnectionTest
      DestinationCidrBlock: !Ref pManagementCIDR

  rRouteMgmtTestPrivate2:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringTestTwoSubnets
    Properties:
      RouteTableId:
        'Fn::ImportValue': !Sub '${pAppId}-test-route-table-private-2'
      VpcPeeringConnectionId: !Ref rPeeringConnectionTest
      DestinationCidrBlock: !Ref pManagementCIDR

  rRouteMgmtTestPrivate3:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringTestThreeSubnets
    Properties:
      RouteTableId:
        'Fn::ImportValue': !Sub '${pAppId}-test-route-table-private-3'
      VpcPeeringConnectionId: !Ref rPeeringConnectionTest
      DestinationCidrBlock: !Ref pManagementCIDR

  rPeeringConnectionDev:
    Type: 'AWS::EC2::VPCPeeringConnection'
    Condition: cCreatePeeringDev
    Properties:
      PeerVpcId: !Ref pDevVPC
      VpcId: !Ref rVPCManagement
      Tags:
        - Key: Name
          Value: vpc-peer-dev-management
        - Key: Environment
          Value: !Ref pEnvironment

  rRouteDevMgmtDMZ:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringDev
    Properties:
      RouteTableId: !Ref rRouteTableMgmtDMZ
      VpcPeeringConnectionId: !Ref rPeeringConnectionDev
      DestinationCidrBlock:
        'Fn::ImportValue': !Sub '${pAppId}-dev-vpc-cidr'

  rRouteDevMgmtPrivate:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringDev
    Properties:
      RouteTableId: !Ref rRouteTableMgmtPrivate
      VpcPeeringConnectionId: !Ref rPeeringConnectionDev
      DestinationCidrBlock:
        'Fn::ImportValue': !Sub '${pAppId}-dev-vpc-cidr'

  rRouteMgmtDevDMZ:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringDev
    Properties:
      RouteTableId:
        'Fn::ImportValue': !Sub '${pAppId}-dev-route-table-dmz'
      VpcPeeringConnectionId: !Ref rPeeringConnectionDev
      DestinationCidrBlock: !Ref pManagementCIDR

  rRouteMgmtDevPrivate1:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringDev
    Properties:
      RouteTableId:
        'Fn::ImportValue': !Sub '${pAppId}-dev-route-table-private-1'
      VpcPeeringConnectionId: !Ref rPeeringConnectionDev
      DestinationCidrBlock: !Ref pManagementCIDR

  rRouteMgmtDevPrivate2:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringDevTwoSubnets
    Properties:
      RouteTableId:
        'Fn::ImportValue': !Sub '${pAppId}-dev-route-table-private-2'
      VpcPeeringConnectionId: !Ref rPeeringConnectionDev
      DestinationCidrBlock: !Ref pManagementCIDR

  rRouteMgmtDevPrivate3:
    Type: 'AWS::EC2::Route'
    Condition: cCreatePeeringDevThreeSubnets
    Properties:
      RouteTableId:
        'Fn::ImportValue': !Sub '${pAppId}-dev-route-table-private-3'
      VpcPeeringConnectionId: !Ref rPeeringConnectionDev
      DestinationCidrBlock: !Ref pManagementCIDR

  rManagementVpcFlowLogsServiceRole:
    Type: 'AWS::IAM::Role'
    Condition: cEnableFlowLogs
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
                Service: 'vpc-flow-logs.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'cloudwatchlogsrole'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource: '*'

  rManagementVpcFlowLog:
    Type: 'AWS::EC2::FlowLog'
    Condition: cEnableFlowLogs
    Properties:
      DeliverLogsPermissionArn: !GetAtt rManagementVpcFlowLogsServiceRole.Arn
      LogGroupName: !Ref pFlowLogGroup
      ResourceId: !Ref rVPCManagement
      ResourceType: VPC
      TrafficType: ALL

  rManagementVpcFlowLogStream:
    Type: 'AWS::Logs::LogStream'
    Condition: cEnableFlowLogs
    Properties:
      LogGroupName: !Ref pFlowLogGroup

Outputs:

  ArtifactId:
    Description: Artifact ID
    Value: base-vpc

  ArtifactVersion:
    Description: Artifact version
    Value: v0.1.4

  rVPCManagement:
    Value: !Ref rVPCManagement
    Export:
      Name: !Sub '${pAppId}-management-vpc'

  rVPCManagementCIDR:
    Value: !Ref pManagementCIDR
    Export:
      Name: !Sub '${pAppId}-management-vpc-cidr'

  rManagementDMZSubnet1:
    Value: !Ref rManagementDMZSubnet1
    Export:
      Name: !Sub '${pAppId}-management-dmz-subnet-1'

  rManagementDMZSubnet2:
    Condition: cCreateTwoSubnets
    Value: !Ref rManagementDMZSubnet2
    Export:
      Name: !Sub '${pAppId}-management-dmz-subnet-2'

  rManagementDMZSubnet3:
    Condition: cCreateThreeSubnets
    Value: !Ref rManagementDMZSubnet3
    Export:
      Name: !Sub '${pAppId}-management-dmz-subnet-3'

  rManagementPrivateSubnet1:
    Value: !Ref rManagementPrivateSubnet1
    Export:
      Name: !Sub '${pAppId}-management-app-subnet-1'

  rManagementPrivateSubnet2:
    Condition: cCreateTwoSubnets
    Value: !Ref rManagementPrivateSubnet2
    Export:
      Name: !Sub '${pAppId}-management-app-subnet-2'

  rManagementPrivateSubnet3:
    Condition: cCreateThreeSubnets
    Value: !Ref rManagementPrivateSubnet3
    Export:
      Name: !Sub '${pAppId}-management-app-subnet-3'

  rRouteTableMgmtPrivate:
    Value: !Ref rRouteTableMgmtPrivate

  rRouteTableMgmtDMZ:
    Value: !Ref rRouteTableMgmtDMZ

  rSecurityGroupVpcNat:
    Condition: cUsePrivateSubnets
    Value: !Ref rSecurityGroupVpcNat

  rEIPManagementNAT:
    Condition: cUsePrivateSubnets
    Value: !Ref rEIPProdNAT

  rSecurityGroupSSHFromMgmt:
    Value: !Ref rSecurityGroupSSHFromMgmt